1.sql注入攻击的场景:
    用户在提交表单的时候，输入sql语句，例如 ' OR 1=1 #  ，那么后台拿到这个带有单引号的语句
    进行sql查询时会结合到一起查询，这样就会导致数据库都会成功查询到数据返回True，那么用户就
    可以通过数据库的验证，不需要用户名密码就可以登陆网站从而盗取信息。

2.sql注入原理:
  实际上就是在后台post获取参数的字段中加入了sql语句，使我们在对获取到的这些参数进行
  数据库查询时，它们会和查询的sql语句结合到一起，突破我们的数据库验证机制。

3.Django中是如何防范sql注入攻击的：
  比如在登陆验证的post方法中，调用django内置的authenticate方法，此方法在根据获取到的参数进行
  数据库查询信息的时候用的是实体类的objects的方法，通过实体类查询会将这些参数进行转义，比如说
  单引号会转义成特殊符号，然后再执行sql语句的时候，他就无法完成像上面说的那种查询。所以说用orm
  实体类进行查询，对网站来说是比较安全的。

4.xss攻击
  解释：xss跨站脚本攻击（Cross Site scripting）的危害。
  攻击常见场景：盗取各类用户账号、如用户网银账号、各类管理员账号、盗取企业重要的具有商业价值资料、
  非法转账、控制受害者服务器向其他网站发起攻击、注入木马等等

5.攻击原理：受害者收到黑客的url链接（链接会包含一些js的代码），用户点击后进入到某网站，并且这个网站没有做参数
  校验的机制，执行了js脚本并返回response给用户，并且这个response中会包含sessionid。用户接受到数据后，js的脚本
  可以将浏览器返回的这些信息中的sessionid发到黑客的服务器，黑客就可以拿到用户的sessionid，伪装成用户登陆此网站，盗取信息。

6.xss攻击的防范措施：1.首先代码里对用户输入的地方和变量都需要仔细检查长度和对特殊字符，例如'<'等字符做
                      过滤和转义。
                    2.避免直接在cookie中泄露用户隐私，例如email、密码等等，通过cookie和系统ip绑定
                      来降低cookie泄露后的危险
                    3.尽量采用post而非get提交表单。

7.csrf攻击：跨站点请求伪造（Cross-site reqeust forgery）

8.csrf攻击场景：用户登陆了受信任的网站A，网站A返回给了用户数据并且携带了sessionid，以后每次用户访问网站A的页面都必须得携带这个sessionid。
         就在这个时候，用户在没关闭网页A的情况下，又在新的浏览器标签页点击了危险网站B，网站B会返回给用户html页面，比如页面中的图片
         会携带一个网站A的url地址（如http://www.mybank/transfer/ID=6666$money=666666），用户点击了这张图片就会访问这个的url进行
         一系列账号操作，盗取用户财产。
  
          